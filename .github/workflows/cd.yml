name: CD
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_APP: ghcr.io/htwar/cs-396-project-2-app
  IMAGE_UI:  ghcr.io/htwar/cs-396-project-2-ui
  TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # Backend image (multi-arch)
      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./app                     # <- fixed
          file: ./app/Dockerfile             # <- fixed
          push: true
          tags: |
            ${{ env.IMAGE_APP }}:${{ env.TAG }}
            ${{ env.IMAGE_APP }}:main
          platforms: linux/amd64,linux/arm64 # good for Mac + x86 server

      # Frontend image (multi-arch)
      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./file-repo-ui            # <- fixed
          file: ./file-repo-ui/Dockerfile    # <- fixed
          push: true
          tags: |
            ${{ env.IMAGE_UI }}:${{ env.TAG }}
            ${{ env.IMAGE_UI }}:main
          platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Copy compose + configs to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "docker-compose.yml,docker-compose.prod.yml,traefik/**,prometheus.yml"
          target: "~/file-repo"

      - name: Pull & restart on server (health-gated)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -euo pipefail
            cd ~/file-repo
            export APP_TAG=${{ env.TAG }}   # <- deploy the exact commit
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            for i in {1..30}; do
              code=$(curl -sk -o /dev/null -w "%{http_code}" https://localhost:8443/healthz)
              [ "$code" = "200" ] && echo "Healthy" && exit 0
              sleep 2
            done
            echo "Health check failed" && exit 1
